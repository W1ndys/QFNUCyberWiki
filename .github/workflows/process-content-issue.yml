name: Process Department Content
on:
  issues:
    types: [labeled, edited]

# 添加并发控制，防止同一Issue被多次处理
concurrency:
  group: issue-${{ github.event.issue.number }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  generate-content:
    runs-on: ubuntu-latest
    # 确保只有带有new-content标签的Issue才会触发
    if: |
      contains(github.event.issue.labels.*.name, 'new-content') && 
      (github.event.action == 'labeled' && !contains(github.event.issue.labels.*.name, '处理中')) || 
      (github.event.action == 'edited' && contains(github.event.issue.labels.*.name, 'new-content'))

    steps:
      # 添加新步骤：记录触发类型
      - name: 记录触发类型
        id: trigger-type
        run: |
          if [ "${{ github.event.action }}" = "edited" ]; then
            echo "is_edit=true" >> $GITHUB_OUTPUT
          else
            echo "is_edit=false" >> $GITHUB_OUTPUT
          fi

      # 1. 添加处理中标签并添加短暂延迟确保标签生效
      - name: 添加处理中标签
        uses: actions/github-script@v6
        with:
          script: |
            // 如果是编辑触发，先移除处理完成标签
            if ('${{ steps.trigger-type.outputs.is_edit }}' === 'true') {
              try {
                await github.rest.issues.removeLabel({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: '处理完成'
                });
              } catch (error) {
                console.log('移除处理完成标签失败:', error.message);
              }
            }

            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['处理中']
            });
            // 添加短暂延迟确保标签生效
            await new Promise(resolve => setTimeout(resolve, 2000));

      # 2. 创建或更新处理评论
      - name: 创建或更新处理评论
        id: initial-comment
        uses: actions/github-script@v6
        with:
          script: |
            let commentBody = '⏳ 正在处理您的请求，请稍候...';
            if ('${{ steps.trigger-type.outputs.is_edit }}' === 'true') {
              commentBody = '⏳ Issue已编辑，正在更新相关PR内容...';
            }

            // 查找是否已存在处理评论
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const processingComment = comments.data.find(comment => 
              comment.body.includes('正在处理您的请求') || 
              comment.body.includes('Issue已编辑') || 
              comment.body.includes('文件已成功生成') ||
              comment.body.includes('已更新现有PR')
            );

            let commentId;
            if (processingComment) {
              // 更新现有评论
              await github.rest.issues.updateComment({
                comment_id: processingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
              commentId = processingComment.id;
            } else {
              // 创建新评论
              const result = await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
              commentId = result.data.id;
            }

            return commentId;

      # 3. 检出代码库
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 4. 安装必要工具
      - name: 安装依赖
        run: |
          sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.35.1/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          pip install pyyaml

      # 5. 从Issue内容提取字段
      - name: 提取模板字段
        id: extract-fields
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          cat > extract.py << 'EOF'
          import os, sys, re, html

          def unescape_markdown(text):
              """解除Markdown转义"""
              if not text:
                  return text
              # 解除常见的Markdown转义字符
              text = text.replace('\\*', '*')
              text = text.replace('\\#', '#')
              text = text.replace('\\`', '`')
              text = text.replace('\\\\', '\\')
              return text

          def extract_section(body, section_name):
              """提取指定部分的内容"""
              if not body:
                  return None
                  
              marker = "### " + section_name
              alt_marker = "**" + section_name + "**"
              
              # 尝试找标准格式
              if marker in body:
                  start = body.find(marker) + len(marker)
                  next_section = body.find("###", start)
                  section_content = body[start:next_section].strip() if next_section != -1 else body[start:].strip()
                  return section_content
              
              # 尝试从表格提取
              elif section_name + " " in body:
                  pattern = r'(?:' + re.escape(section_name) + r'|' + re.escape(alt_marker) + r')\s+([^\n|]+)'
                  match = re.search(pattern, body)
                  if match:
                      return match.group(1).strip()
              
              return None
              
          def extract_content(body):
              """提取内容 - 从第一个```markdown开始，到最后一个```结束"""
              markdown_start = body.find("```markdown")
              if markdown_start == -1:
                  return None
              
              content_start = body.find("\n", markdown_start)
              if content_start == -1:
                  return None
              content_start += 1
              
              markdown_end = body.rfind("```")
              if markdown_end == -1 or markdown_end <= content_start:
                  return None
              
              content = body[content_start:markdown_end].strip()
              content = unescape_markdown(content)
              content = content.replace('\\n', '\n')
              return content

          # 主程序
          body = os.environ.get("ISSUE_BODY", "")

          try:
              department = extract_section(body, "部门名称")
              title = extract_section(body, "标题")
              filename = extract_section(body, "文件名")
              content = extract_content(body)

              # 去掉文件名后缀，自动替换文件名里的_为-，自动去掉空格
              if filename and filename.endswith('.md'):
                  filename = filename.replace('.md', '')
                  filename = filename.replace('_', '-').replace(' ', '')
              
              # 验证必要字段
              missing = []
              if not department:
                  missing.append("部门名称")
              if not filename:
                  missing.append("文件名")
              if not content:
                  missing.append("主要内容")
                  
              if missing:
                  print(f"错误: 缺少必要字段: {', '.join(missing)}")
                  sys.exit(1)
              
              # 输出到环境变量
              with open(os.environ["GITHUB_OUTPUT"], "a") as f:
                  f.write(f"DEPARTMENT={department}\n")
                  f.write(f"FILENAME={filename}\n")
                  if title:
                      f.write(f"TITLE={title}\n")
                  f.write(f"CONTENT<<EOF_CONTENT\n{content}\nEOF_CONTENT\n")
          except Exception as e:
              print(f"提取过程中发生错误: {str(e)}")
              sys.exit(1)
          EOF

          python extract.py

      # 6. 处理提取失败的情况
      - name: 处理提取失败
        if: ${{ failure() && steps.extract-fields.outcome == 'failure' }}
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.updateComment({
              comment_id: ${{ steps.initial-comment.outputs.script-result }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ 错误：无法从Issue内容中提取必要信息。请确保包含以下必要字段：\n\n```\n### 部门名称\n<部门名称>\n\n### 文件名\n<文件名>\n\n### 主要内容\n```markdown\n<内容>\n```\n```'
            });
            await github.rest.issues.removeLabel({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: '处理中'
            });

      # 7. 匹配部门目录
      - name: 匹配部门目录
        id: find-department
        env:
          DEPARTMENT: ${{ steps.extract-fields.outputs.DEPARTMENT }}
        run: |
          BASE_DIR="src"
          TARGET_DIR=""

          for dir in $(find $BASE_DIR -maxdepth 1 -type d); do
            readme="$dir/README.md"
            if [ -f "$readme" ]; then
              frontmatter=$(sed -n '/^---$/,/^---$/p' $readme | head -n -1 | tail -n +2)
              title=$(python -c "import yaml; print(yaml.safe_load('''$frontmatter''').get('title', ''))")
              
              if [ "$title" = "$DEPARTMENT" ]; then
                TARGET_DIR="${dir#*/}"
                break
              fi
            fi
          done

          if [ -z "$TARGET_DIR" ]; then
            echo "未找到匹配部门目录！"
            exit 1
          fi

          echo "target_dir=$TARGET_DIR" >> $GITHUB_OUTPUT

      # 8. 处理部门匹配失败
      - name: 处理部门匹配失败
        if: ${{ failure() && steps.find-department.outcome == 'failure' }}
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.updateComment({
              comment_id: ${{ steps.initial-comment.outputs.script-result }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ 错误：未找到与部门名称"${{ steps.extract-fields.outputs.DEPARTMENT }}"匹配的目录，请检查部门名称是否正确'
            });
            await github.rest.issues.removeLabel({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: '处理中'
            });

      # 9. 生成文件
      - name: 生成文件
        id: generate-file
        env:
          DEPARTMENT: ${{ steps.extract-fields.outputs.DEPARTMENT }}
          FILENAME: ${{ steps.extract-fields.outputs.FILENAME }}
          TITLE: ${{ steps.extract-fields.outputs.TITLE }}
          CONTENT: ${{ steps.extract-fields.outputs.CONTENT }}
          TARGET_DIR: ${{ steps.find-department.outputs.target_dir }}
          ISSUE_AUTHOR: ${{ github.event.issue.user.login }}
        run: |
          CLEAN_FILENAME=$(echo "$FILENAME" | tr ' ' '-' | tr -cd '[:alnum:]-_')
          FILE_PATH="src/$TARGET_DIR/${CLEAN_FILENAME}.md"
          echo "file_path=$FILE_PATH" >> $GITHUB_OUTPUT
          echo "clean_filename=$CLEAN_FILENAME" >> $GITHUB_OUTPUT

          # 检查文件是否已存在
          if [ -f "$FILE_PATH" ]; then
            echo "文件已存在，将更新内容"
            echo "is_update=true" >> $GITHUB_OUTPUT
          else
            echo "is_update=false" >> $GITHUB_OUTPUT
          fi

          ARTICLE_TITLE="${TITLE:-来自 $DEPARTMENT 的投稿}"
          echo "---" > $FILE_PATH
          echo "title: $ARTICLE_TITLE" >> $FILE_PATH
          echo "---" >> $FILE_PATH
          echo "" >> $FILE_PATH
          echo "$CONTENT" >> $FILE_PATH
          echo "" >> $FILE_PATH
          echo "---" >> $FILE_PATH
          echo "" >> $FILE_PATH
          echo "> 投稿人: [@$ISSUE_AUTHOR](https://github.com/$ISSUE_AUTHOR)" >> $FILE_PATH

      # 10. 检查是否已有对应PR
      - name: 检查现有PR
        id: check-existing-pr
        uses: actions/github-script@v6
        with:
          script: |
            // 查找与当前Issue相关的PR
            const pulls = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:content-update/issue-${context.issue.number}`
            });

            if (pulls.data.length > 0) {
              return pulls.data[0].number;
            }

            // 检查PR正文中是否包含当前Issue编号
            const allPulls = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });

            for (const pr of allPulls.data) {
              if (pr.body && pr.body.includes(`closes #${context.issue.number}`)) {
                return pr.number;
              }
            }

            return null;

      # 11. 创建分支并提交更改
      - name: 创建分支并提交更改
        id: create-branch
        # 修改条件：当是编辑触发时，始终执行此步骤
        if: ${{ !steps.check-existing-pr.outputs.script-result || steps.trigger-type.outputs.is_edit == 'true' }}
        env:
          FILENAME: ${{ steps.generate-file.outputs.clean_filename }}
          FILE_PATH: ${{ steps.generate-file.outputs.file_path }}
          IS_UPDATE: ${{ steps.generate-file.outputs.is_update }}
          IS_EDIT: ${{ steps.trigger-type.outputs.is_edit }}
        run: |
          # 使用固定格式的分支名
          BRANCH_NAME="content-update/issue-${{ github.event.issue.number }}"

          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # 检查分支是否已存在
          if git show-ref --verify --quiet "refs/heads/$BRANCH_NAME"; then
            echo "分支已存在，将直接使用"
            git checkout $BRANCH_NAME
          else
            echo "创建新分支"
            git checkout -b $BRANCH_NAME
          fi

          git add "$FILE_PATH"

          if [ "$IS_EDIT" = "true" ]; then
            git commit -m "更新内容(由Issue编辑触发): $FILENAME (部门: ${{ steps.extract-fields.outputs.DEPARTMENT }}) [Issue #${{ github.event.issue.number }}]"
          elif [ "$IS_UPDATE" = "true" ]; then
            git commit -m "更新内容: $FILENAME (部门: ${{ steps.extract-fields.outputs.DEPARTMENT }}) [Issue #${{ github.event.issue.number }}]"
          else
            git commit -m "添加内容: $FILENAME (部门: ${{ steps.extract-fields.outputs.DEPARTMENT }}) [Issue #${{ github.event.issue.number }}]"
          fi

          git push origin $BRANCH_NAME --force

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "repo_url=https://github.com/${{ github.repository }}" >> $GITHUB_OUTPUT

      # 12. 创建或更新Pull Request
      - name: 创建或更新Pull Request
        id: create-pr
        uses: actions/github-script@v6
        env:
          BRANCH_NAME: ${{ steps.create-branch.outputs.branch_name || format('content-update/issue-{0}', github.event.issue.number) }}
          DEPARTMENT: ${{ steps.extract-fields.outputs.DEPARTMENT }}
          FILENAME: ${{ steps.generate-file.outputs.clean_filename }}
          TITLE: ${{ steps.extract-fields.outputs.TITLE }}
          TARGET_DIR: ${{ steps.find-department.outputs.target_dir }}
          EXISTING_PR: ${{ steps.check-existing-pr.outputs.script-result }}
          IS_EDIT: ${{ steps.trigger-type.outputs.is_edit }}
          REPO_URL: ${{ format('https://github.com/{0}', github.repository) }}
        with:
          script: |
            const title = `内容投稿: ${process.env.DEPARTMENT} - ${process.env.TITLE || process.env.FILENAME}`;
            const body = `由 Issue #${context.issue.number} 自动生成
            部门目录: \`src/${process.env.TARGET_DIR}\`
            ${process.env.IS_EDIT === 'true' ? '> 📝 此PR已根据Issue编辑内容更新\n' : ''}
            ---

            closes #${context.issue.number}`;

            let prNumber;

            try {
              if (process.env.EXISTING_PR) {
                console.log(`更新现有PR #${process.env.EXISTING_PR}`);
                await github.rest.pulls.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: process.env.EXISTING_PR,
                  title: title,
                  body: body
                });
                prNumber = process.env.EXISTING_PR;
              } else {
                // 再次检查是否有现有PR（通过分支名称）
                const branchName = process.env.BRANCH_NAME;
                const pulls = await github.rest.pulls.list({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'open',
                  head: `${context.repo.owner}:${branchName}`
                });
                
                if (pulls.data.length > 0) {
                  // 如果找到现有PR，则更新它
                  console.log(`找到现有PR #${pulls.data[0].number}，正在更新...`);
                  await github.rest.pulls.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pulls.data[0].number,
                    title: title,
                    body: body
                  });
                  prNumber = pulls.data[0].number;
                } else {
                  // 如果确实没有现有PR，则创建新PR
                  console.log('创建新PR');
                  try {
                    const result = await github.rest.pulls.create({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      title: title,
                      body: body,
                      head: branchName,
                      base: 'main'
                    });
                    prNumber = result.data.number;
                  } catch (error) {
                    // 如果创建失败，尝试再次查找可能存在的PR
                    if (error.status === 422) {
                      console.log('创建PR失败，尝试查找已存在的PR...');
                      const allPulls = await github.rest.pulls.list({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        state: 'open'
                      });
                      
                      // 查找任何可能关联的PR
                      for (const pr of allPulls.data) {
                        if (pr.head.ref === branchName || (pr.body && pr.body.includes(`closes #${context.issue.number}`))) {
                          console.log(`找到关联PR #${pr.number}，将使用该PR`);
                          await github.rest.pulls.update({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            pull_number: pr.number,
                            title: title,
                            body: body
                          });
                          prNumber = pr.number;
                          break;
                        }
                      }
                      
                      if (!prNumber) {
                        throw new Error(`无法创建或找到关联的PR: ${error.message}`);
                      }
                    } else {
                      throw error;
                    }
                  }
                }
              }
              
              return prNumber.toString();
            } catch (error) {
              console.log(`处理PR时出错: ${error.message}`);
              throw error;
            }

      # 13. 更新评论通知结果
      - name: 更新处理结果评论
        if: always()
        uses: actions/github-script@v6
        env:
          REPO_URL: ${{ format('https://github.com/{0}', github.repository) }}
          BRANCH_NAME: ${{ steps.create-branch.outputs.branch_name || format('content-update/issue-{0}', github.event.issue.number) }}
          DEPARTMENT_DIR: ${{ steps.find-department.outputs.target_dir }}
          FILENAME: ${{ steps.generate-file.outputs.clean_filename }}
          COMMENT_ID: ${{ steps.initial-comment.outputs.result }}
        with:
          script: |
            // 去除引号，确保PR号是纯数字
            const prNumber = ${{ steps.create-pr.outputs.result || 'null' }};
            const existingPr = ${{ steps.check-existing-pr.outputs.script-result || 'null' }};
            const success = prNumber && prNumber !== null;
            const isEdit = '${{ steps.trigger-type.outputs.is_edit }}' === 'true';

            // 获取评论ID
            const commentId = process.env.COMMENT_ID;

            if (success) {
              let message;
              if (isEdit) {
                message = `✅ Issue编辑内容已更新到PR #${prNumber}\n\n你可以在下面链接中查看Pull Request的详细内容和修改情况\n${process.env.REPO_URL}/pull/${prNumber}\n\n直接编辑文件: ${process.env.REPO_URL}/edit/${process.env.BRANCH_NAME}/src/${process.env.DEPARTMENT_DIR}/${process.env.FILENAME}.md\n\n查看文件: ${process.env.REPO_URL}/blob/${process.env.BRANCH_NAME}/src/${process.env.DEPARTMENT_DIR}/${process.env.FILENAME}.md\n\n你可以在合并后3分钟左右访问生成后的页面URL：https://w1ndys.github.io/QFNUCyberWiki/${process.env.DEPARTMENT_DIR}/${process.env.FILENAME}.html`;
              } else if (existingPr) {
                message = `♻️ 已更新现有PR [#${prNumber}](${process.env.REPO_URL}/pull/${prNumber}) 内容\n\n直接编辑文件: ${process.env.REPO_URL}/edit/${process.env.BRANCH_NAME}/src/${process.env.DEPARTMENT_DIR}/${process.env.FILENAME}.md\n\n查看文件: ${process.env.REPO_URL}/blob/${process.env.BRANCH_NAME}/src/${process.env.DEPARTMENT_DIR}/${process.env.FILENAME}.md`;
              } else {
                message = `✅ 文件已成功生成并提交到分支 [\`${process.env.BRANCH_NAME}\`](${process.env.REPO_URL}/tree/${process.env.BRANCH_NAME})！\n\nPR: [#${prNumber}](${process.env.REPO_URL}/pull/${prNumber})\n\n直接编辑文件: ${process.env.REPO_URL}/edit/${process.env.BRANCH_NAME}/src/${process.env.DEPARTMENT_DIR}/${process.env.FILENAME}.md\n\n查看文件: ${process.env.REPO_URL}/blob/${process.env.BRANCH_NAME}/src/${process.env.DEPARTMENT_DIR}/${process.env.FILENAME}.md\n\n你可以在合并后3分钟左右访问生成后的页面URL：https://w1ndys.github.io/QFNUCyberWiki/${process.env.DEPARTMENT_DIR}/${process.env.FILENAME}.html\n\n当PR被合并时，此Issue将自动关闭。`;
              }

              try {
                if (commentId) {
                  await github.rest.issues.updateComment({
                    comment_id: commentId,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: message
                  });
                } else {
                  await github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: message
                  });
                }
              } catch (error) {
                console.log('更新评论失败:', error.message);
                
                // 尝试创建新评论
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: message
                });
              }
            } else {
              try {
                if (commentId) {
                  await github.rest.issues.updateComment({
                    comment_id: commentId,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: '❌ 处理过程中发生错误，请检查Issue格式是否正确或联系管理员'
                  });
                } else {
                  await github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: '❌ 处理过程中发生错误，请检查Issue格式是否正确或联系管理员'
                  });
                }
              } catch (error) {
                console.log('更新错误评论失败:', error.message);
              }
            }

            // 更新标签状态
            try {
              await github.rest.issues.removeLabel({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: '处理中'
              });

              if (success) {
                await github.rest.issues.addLabels({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  labels: ['处理完成']
                });
              }
            } catch (error) {
              console.log('更新标签失败:', error.message);
            }
